{"version":3,"sources":["modules/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","src","imgURL","alt","Board","_useState","useState","Array","fill","_useState2","Object","slicedToArray","cardClicked","setCardClicked","_useState3","_useState4","score","setScore","_useState5","_useState6","highScore","setHighScore","renderCard","i","modules_Card","id","stateCardClicked","startSeq","randSeq","length","j","Math","floor","random","push","splice","App","App_Board","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"mMAeiBA,MAbjB,SAAcC,GAEV,OACEC,EAAAC,EAAAC,cAAA,UACAC,UAAY,OACZC,QAASL,EAAMK,SAEbJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKN,EAAMO,OAAQC,IAAI,WCD9BC,EAAQ,WA0Dd,IA1DoB,IAAAC,EAEkBC,mBAASC,MAAM,IAAIC,MAAK,IAF1CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAEbO,EAFaH,EAAA,GAEAI,EAFAJ,EAAA,GAAAK,EAGMR,mBAAS,GAHfS,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGbE,EAHaD,EAAA,GAGNE,EAHMF,EAAA,GAAAG,EAIcZ,mBAAS,GAJvBa,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIbE,EAJaD,EAAA,GAIFE,EAJEF,EAAA,GAyBZjB,EAAS,CACb,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,4CAMIoB,EAAa,SAACC,GAClB,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CAEPC,GAAIF,EACJrB,OAAQA,EAAOqB,GACfvB,QAAS,kBAzCc,SAACuB,IACF,IAAnBX,EAAYW,IACVP,EAAQI,GACTC,EAAaL,GAEfH,EAAeN,MAAM,IAAIC,MAAK,IAC9BS,EAAS,KAGTL,EAAYW,IAAK,EACjBN,EAASD,EAAO,GACbA,GAASI,GACVC,EAAaL,EAAM,IA6BRU,CAAiBH,OAI9BI,EAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IACjCC,EAAU,GAEdL,EAAII,EAASE,OACbC,EAAI,EAEDP,KACLO,EAAIC,KAAKC,MAAMD,KAAKE,UAAYV,EAAE,IAClCK,EAAQM,KAAKP,EAASG,IACtBH,EAASQ,OAAOL,EAAG,GAMjB,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,SAAR,WACWT,GAEXpB,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,aAAR,mBACmBL,IAIrBxB,EAAAC,EAAAC,cAAA,WAECwB,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,IACnBN,EAAWM,EAAQ,KACnBN,EAAWM,EAAQ,QAoBbQ,MARf,WACA,OACCxC,EAAAC,EAAAC,cAACuC,EAAD,OCrGcC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3D,EAAAC,EAAAC,cAACF,EAAAC,EAAM2D,WAAP,KACE5D,EAAAC,EAAAC,cAAC2D,EAAD,QAOJnB","file":"static/js/main.c1b477f7.chunk.js","sourcesContent":["// Simple function that contains the onclick and imgurl value\nimport React from 'react';\nfunction Card(props) {\n\n    return (\n      <button \n      className = 'card'\n      onClick={props.onClick}\n      >\n        <img src={props.imgURL} alt=\"card\"/>\n        \n      </button>\n    );\n  }\n\n  export default Card;","import './App.css';\nimport Card from './modules/Card.js';\nimport React, {useState} from 'react';\n\n\n\n\n\nconst Board = () => {\n\n  let [cardClicked, setCardClicked] = useState(Array(12).fill(false));\n  let [score, setScore] = useState(0);\n  let [highScore, setHighScore] = useState(0);\n\n// Adds to the score counter or resets all cards click state depending on if the card was already clicked\n  const stateCardClicked = (i) => {\n    if(cardClicked[i] === true){\n      if(score > highScore){\n        setHighScore(score);\n      }\n      setCardClicked(Array(12).fill(false));\n      setScore(0);\n    } else{\n      \n      cardClicked[i] = true;\n      setScore(score +1);\n      if(score >= highScore){\n        setHighScore(score+1);\n      }\n    }\n  };\n\n// All the img urls, this could be swapped for a random image via an API\n  const imgURL = [\n    'https://ygoprodeck.com/pics/15754711.jpg',\n    'https://ygoprodeck.com/pics/41232647.jpg',\n    'https://ygoprodeck.com/pics/57416183.jpg',\n    'https://ygoprodeck.com/pics/24799107.jpg',\n    'https://ygoprodeck.com/pics/16960120.jpg',\n    'https://ygoprodeck.com/pics/40398073.jpg',\n    'https://ygoprodeck.com/pics/88453933.jpg',\n    'https://ygoprodeck.com/pics/32600024.jpg',\n    'https://ygoprodeck.com/pics/77515704.jpg',\n    'https://ygoprodeck.com/pics/76782778.jpg',\n    'https://ygoprodeck.com/pics/42055234.jpg',\n    'https://ygoprodeck.com/pics/40110009.jpg',\n    \n  ];\n\n  \n\n  const renderCard = (i) => {\n    return <Card \n    \n    id={i}\n    imgURL={imgURL[i]}\n    onClick={() => stateCardClicked(i)}\n    />;\n  };\n\nconst startSeq = [0,1,2,3,4,5,6,7,8,9,10,11],\n        randSeq = [];\n\nlet i = startSeq.length,\n    j = 0;\n\nwhile (i--) {\n  j = Math.floor(Math.random() * (i+1));\n  randSeq.push(startSeq[j]);\n  startSeq.splice(j, 1);\n}\n\n \n\n\n    return (\n      <div className=\"App\">\n        <div>\n          <div id=\"score\">\n            Score : {score}\n          </div>\n          <div id=\"highscore\">\n            Highest Score : {highScore}\n          </div>\n        </div>\n\n        <div>\n        \n        {renderCard(randSeq[0])}\n        {renderCard(randSeq[1])}\n        {renderCard(randSeq[2])}\n        {renderCard(randSeq[3])}\n        {renderCard(randSeq[4])}\n        {renderCard(randSeq[5])}\n        {renderCard(randSeq[6])}\n        {renderCard(randSeq[7])}\n        {renderCard(randSeq[8])}\n        {renderCard(randSeq[9])}\n        {renderCard(randSeq[10])}\n        {renderCard(randSeq[11])}\n\n\n        </div>\n        \n\n      </div>\n    );\n  }\n\n\n\nfunction App() {\nreturn (\n <Board />\n    );\n    \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}